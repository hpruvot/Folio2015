//FONTS 
	
	$folderBodoni: "../fonts/Bauer Bodoni";
	$folderBrandon: "../fonts/Brandon Grotesque";
	$folderPlayfair: "../fonts/Playfair";
  $folderRoboto: "../fonts/Roboto";

	@mixin font-face-bodoni($family, $filename) {
	  @font-face {
	    font-family: $family;
	    src: url('#{$folderBodoni}/#{$filename}.eot');
	    src: url('#{$folderBodoni}/#{$filename}.eot?#iefix') format("embedded-opentype"),
	    	url('#{$folderBodoni}/#{$filename}.woff') format("woff"),
	    	url('#{$folderBodoni}/#{$filename}.ttf') format("truetype"),
	    	url('#{$folderBodoni}/#{$filename}.svg#08bb4ba465a902745fc23c83a5d9fdc2') format("svg");
	   	font-weight: normal;
    	font-style: normal;
	  }
	}


	@mixin font-face-brandon($family, $filename) {
	  @font-face {
	    font-family: $family;
	    src: url('#{$folderBrandon}/#{$filename}.eot');
	    src: url('#{$folderBrandon}/#{$filename}.eot?#iefix') format("embedded-opentype"),
	    	url('#{$folderBrandon}/#{$filename}.woff') format("woff"),
	    	url('#{$folderBrandon}/#{$filename}.ttf') format("truetype"),
	    	url('#{$folderBrandon}/#{$filename}.svg#08bb4ba465a902745fc23c83a5d9fdc2') format("svg");
	    font-weight: normal;
    	font-style: normal;
	  }
	}

	@mixin font-face-playfair($family, $filename) {
	  @font-face {
	    font-family: $family;
	    src: url('#{$folderPlayfair}/#{$filename}.eot');
	    src: url('#{$folderPlayfair}/#{$filename}.eot?#iefix') format("embedded-opentype"),
	    	url('#{$folderPlayfair}/#{$filename}.woff') format("woff"),
	    	url('#{$folderPlayfair}/#{$filename}.ttf') format("truetype"),
	    	url('#{$folderPlayfair}/#{$filename}.svg#08bb4ba465a902745fc23c83a5d9fdc2') format("svg");
	    font-weight: normal;
    	font-style: normal;
	  }
	}

  @mixin font-face-roboto($family, $filename) {
    @font-face {
      font-family: $family;
      src: url('#{$folderRoboto}/#{$filename}.eot');
      src: url('#{$folderRoboto}/#{$filename}.eot?#iefix') format("embedded-opentype"),
        url('#{$folderRoboto}/#{$filename}.woff') format("woff"),
        url('#{$folderRoboto}/#{$filename}.ttf') format("truetype"),
        url('#{$folderRoboto}/#{$filename}.svg#08bb4ba465a902745fc23c83a5d9fdc2') format("svg");
      font-weight: normal;
      font-style: normal;
    }
  }

//TRANSITIONS
@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text{
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
       }
      }
     }
        
   @if $fadeout == true{
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false{
        @if $direction == right{
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left{
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
      @if ($type == box) and $skew == true{
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
      }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
 }
 @if $fadeout == false{
   @if $skew == true and ( $type == box ){
     @for $i from 0 to $length - 1 {
            $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
   }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
 }
 $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}